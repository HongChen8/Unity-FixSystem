帧同步的两种方式:
1.严格帧同步
-- 每一次网络帧,服务器下发一个收集指令,去收集所有玩家的操作,当所有玩家都收到回包后,转发操作
延迟:延迟最高的玩家的上下行延迟 + 自身的下行延迟
问题:当有的玩家延迟比较高时,会导致所有玩家都要等待该玩家的返回


2.固定帧同步
-- 每一次网络帧,服务器直接将上一帧的操作数据下发出去,没有操作就视为空操作,玩家在收到网络帧后将此时的操作传递给服务器
问题:不需要等待所有玩家的操作,但会导致所有玩家的操作都会有一个最小延迟
延迟:玩家上下行包的延迟 和 网络帧的时间间隔 的最小值
在不考虑上下行延迟时,则为网络帧的时间间隔,一般设置在100ms以内


-- 网络帧下行包
    由服务器发送给所有在线玩家
    包括每个的玩家在上一帧的操作
-- 网络帧上行包
    由客户端发送给服务器
    包括客户端在当前帧的操作

关于上行包的发送频率
一般来讲,客户端的渲染帧频率会远远大于网络帧的频率,如果每个渲染帧都去发送一次上行包,就会导致让游戏操作堆积在服务器
正确的方式应该是控制上行包的发送频率,至少收到一个下行包,才发送一次上行包

假设网络帧的更新频率为 250ms
玩家上下行包的传输速度都是 50ms
0ms     -- 服务下发网络帧
50ms    -- 玩家收到网络帧,并将此时的操作A传递给服务器
100ms   -- 服务器收到操作A
250ms   -- 服务器下发网络帧
300ms   -- 玩家收到操作A
可以看到,当更新频率大于上下行包的传输速度时,此时玩家的操作延迟就是服务器网络帧的刷新频率,也就是250ms


假设网络帧的更新频率为 70ms
玩家上下行包的传输速度都是 50ms
0ms     -- 服务下发网络帧,操作C
50ms    -- 玩家收到网络帧,并将此时的操作A传递给服务器
70ms    -- 服务器更新网络帧,操作C,因为操作A还在上传中
100ms   -- 服务器收到操作A
140ms   -- 服务器更新网络帧,操作A
190ms   -- 玩家收到操作A
可以看到,当更新频率小于上下行包的传输速度时,此时玩家的操作延迟就是上下行包的传输速度,也就是140ms

事实上,当延迟在100ms内,则玩家的操作没有太大感受,即在不考虑上下行包的延迟时,将服务器网络帧的刷新频率定在100ms以内,每秒中至少执行10次